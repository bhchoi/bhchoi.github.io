I"Xy<h2 id="띄어쓰기-태깅">띄어쓰기 태깅</h2>

<p>먼저 띄어쓰기에 대한 태깅 합니다.<br />
NER과 동일한 방법으로 각 토큰을 BI로 표현해보겠습니다.
word 기준이 아닌 char 기준으로 태깅을 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td> --><td class="rouge-code"><pre><span class="n">sentence</span> <span class="o">=</span> <span class="s">"그 외 기간은 관계자 외 출입금지입니다."</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)</span>
<span class="n">tags</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">sentence</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">tags</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">tags</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"I"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="o">&gt;&gt;</span> <span class="n">tags</span>
<span class="p">[</span><span class="s">'B'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">,</span> <span class="s">'I'</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p> </p>

<h2 id="custom-dataset-생성">Custom Dataset 생성</h2>

<p>위 내용을 이용해 pytorch custom dataset을 만들어 보겠습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td> --><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">Dataset</span>

<span class="k">class</span> <span class="nc">CorpusDataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">sentences</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">slot_labels</span> <span class="o">=</span> <span class="p">[</span><span class="s">"UNK"</span><span class="p">,</span> <span class="s">"PAD"</span><span class="p">,</span> <span class="s">"B"</span><span class="p">,</span> <span class="s">"I"</span><span class="p">]</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">_load_data</span><span class="p">(</span><span class="n">data_path</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_load_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="s">"""data를 file에서 불러온다.

        Args:
            data_path: file 경로
        """</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">"r"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf-8"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">sentences</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">_get_tags</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sentence</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="s">"""문장에 대해 띄어쓰기 tagging을 한다.
        character 단위로 분리하여 BI tagging을 한다.

        Args:
            sentence: 문장

        Retrns:
            문장의 각 토큰에 대해 tagging한 결과 리턴
            ["B", "I"]
        """</span>

        <span class="n">tags</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">sentence</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">tags</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">tags</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"I"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">tags</span>

    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">sentences</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
        <span class="k">pass</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p> </p>

<p>띄어쓰기에 대한 표현은 완성이 되었고, 이제 한글 문장을 BERT의 input feature로 만들어 보겠습니다.</p>

<p>input feature를 만드는 transform function을 넘겨받아 __getitem__()에 해당 내용을 추가합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
</pre></td> --><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">Dataset</span>

<span class="k">class</span> <span class="nc">CorpusDataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">transform</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[</span><span class="n">List</span><span class="p">,</span> <span class="n">List</span><span class="p">],</span> <span class="n">Tuple</span><span class="p">]):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">sentences</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">slot_labels</span> <span class="o">=</span> <span class="p">[</span><span class="s">"UNK"</span><span class="p">,</span> <span class="s">"PAD"</span><span class="p">,</span> <span class="s">"B"</span><span class="p">,</span> <span class="s">"I"</span><span class="p">]</span>
		<span class="bp">self</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">_load_data</span><span class="p">(</span><span class="n">data_path</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_load_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="s">"""data를 file에서 불러온다.

        Args:
            data_path: file 경로
        """</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">"r"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf-8"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">sentences</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">_get_tags</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sentence</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="s">"""문장에 대해 띄어쓰기 tagging을 한다.
        character 단위로 분리하여 BI tagging을 한다.

        Args:
            sentence: 문장

        Retrns:
            문장의 각 토큰에 대해 tagging한 결과 리턴
            ["B", "I"]
        """</span>

        <span class="n">tags</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">sentence</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">tags</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">tags</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"I"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">tags</span>

    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">sentences</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
        <span class="n">sentence</span> <span class="o">=</span> <span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">sentences</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
				<span class="n">sentence</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">sentence</span><span class="p">]</span>
        <span class="n">tags</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_get_tags</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">sentences</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
        <span class="n">tags</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">slot_labels</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tags</span><span class="p">]</span>

        <span class="p">(</span>
            <span class="n">input_ids</span><span class="p">,</span>
            <span class="n">attention_mask</span><span class="p">,</span>
            <span class="n">token_type_ids</span><span class="p">,</span>
            <span class="n">slot_label_ids</span><span class="p">,</span> 
        <span class="p">)</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="n">sentence</span><span class="p">,</span> <span class="n">tags</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">input_ids</span><span class="p">,</span> <span class="n">attention_mask</span><span class="p">,</span> <span class="n">token_type_ids</span><span class="p">,</span> <span class="n">slot_label_ids</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p> </p>

<h2 id="input-feature-생성">Input feature 생성</h2>

<p>그럼 transform function을 구현해보겠습니다.
pretrained model는 <a href="https://github.com/SKTBrain/KoBERT" target="_blank">KoBERT</a>를 사용합니다.</p>

<p>BERT의 input은 다음와 같습니다. 
<img src="/assets/img/user/bert_input.png" alt="bert_input.png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td> --><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="kn">from</span> <span class="nn">tokenization_kobert</span> <span class="kn">import</span> <span class="n">KoBertTokenizer</span>

<span class="k">class</span> <span class="nc">Preprocessor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">max_len</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">tokenizer</span> <span class="o">=</span> <span class="n">KoBertTokenizer</span><span class="p">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s">"monologg/kobert"</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">max_len</span> <span class="o">=</span> <span class="n">max_len</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">pad_token_id</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">get_input_features</span><span class="p">(</span>
        <span class="bp">self</span><span class="p">,</span> <span class="n">sentence</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">tags</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">]:</span>
        <span class="s">"""문장과 띄어쓰기 tagging에 대해 feature로 변환한다.

        Args:
            sentence: 문장
            tags: 띄어쓰기 tagging

        Returns:
            feature를 리턴한다.
            input_ids, attention_mask, token_type_ids, slot_labels
        """</span>

        <span class="n">input_tokens</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">slot_label_ids</span> <span class="o">=</span> <span class="p">[]</span>
					
        <span class="c1"># tokenize
</span>        <span class="k">for</span> <span class="n">word</span><span class="p">,</span> <span class="n">tag</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">sentence</span><span class="p">,</span> <span class="n">tags</span><span class="p">):</span>
            <span class="n">tokens</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">tokenize</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">tokens</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">unk_token</span>

            <span class="n">input_tokens</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>

            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tokens</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">slot_label_ids</span><span class="p">.</span><span class="n">extend</span><span class="p">([</span><span class="n">tag</span><span class="p">])</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">slot_label_ids</span><span class="p">.</span><span class="n">extend</span><span class="p">([</span><span class="bp">self</span><span class="p">.</span><span class="n">pad_token_id</span><span class="p">])</span>

        <span class="c1"># max_len보다 길이가 길면 뒤에 자르기
</span>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">input_tokens</span><span class="p">)</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">max_len</span> <span class="o">-</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">input_tokens</span> <span class="o">=</span> <span class="n">input_tokens</span><span class="p">[:</span> <span class="bp">self</span><span class="p">.</span><span class="n">max_len</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span>
            <span class="n">slot_label_ids</span> <span class="o">=</span> <span class="n">slot_label_ids</span><span class="p">[:</span> <span class="bp">self</span><span class="p">.</span><span class="n">max_len</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span>

        <span class="c1"># cls, sep 추가
</span>        <span class="n">input_tokens</span> <span class="o">=</span> <span class="p">(</span>
            <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">cls_token</span><span class="p">]</span> <span class="o">+</span> <span class="n">input_tokens</span> <span class="o">+</span> <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">sep_token</span><span class="p">]</span>
        <span class="p">)</span>
        <span class="n">slot_label_ids</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">pad_token_id</span><span class="p">]</span> <span class="o">+</span> <span class="n">slot_label_ids</span> <span class="o">+</span> <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">pad_token_id</span><span class="p">]</span>

        <span class="c1"># token을 id로 변환
</span>        <span class="n">input_ids</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">convert_tokens_to_ids</span><span class="p">(</span><span class="n">input_tokens</span><span class="p">)</span>

        <span class="n">attention_mask</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">input_ids</span><span class="p">)</span>
        <span class="n">token_type_ids</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">input_ids</span><span class="p">)</span>

        <span class="c1"># padding
</span>        <span class="n">pad_len</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">max_len</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">input_tokens</span><span class="p">)</span>
        <span class="n">input_ids</span> <span class="o">=</span> <span class="n">input_ids</span> <span class="o">+</span> <span class="p">([</span><span class="bp">self</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">pad_token_id</span><span class="p">]</span> <span class="o">*</span> <span class="n">pad_len</span><span class="p">)</span>
        <span class="n">slot_label_ids</span> <span class="o">=</span> <span class="n">slot_label_ids</span> <span class="o">+</span> <span class="p">([</span><span class="bp">self</span><span class="p">.</span><span class="n">pad_token_id</span><span class="p">]</span> <span class="o">*</span> <span class="n">pad_len</span><span class="p">)</span>
        <span class="n">attention_mask</span> <span class="o">=</span> <span class="n">attention_mask</span> <span class="o">+</span> <span class="p">([</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">pad_len</span><span class="p">)</span>
        <span class="n">token_type_ids</span> <span class="o">=</span> <span class="n">token_type_ids</span> <span class="o">+</span> <span class="p">([</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">pad_len</span><span class="p">)</span>

        <span class="n">input_ids</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">input_ids</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="p">.</span><span class="nb">long</span><span class="p">)</span>
        <span class="n">attention_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">attention_mask</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="p">.</span><span class="nb">long</span><span class="p">)</span>
        <span class="n">token_type_ids</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">token_type_ids</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="p">.</span><span class="nb">long</span><span class="p">)</span>
        <span class="n">slot_label_ids</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">slot_label_ids</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="p">.</span><span class="nb">long</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">input_ids</span><span class="p">,</span> <span class="n">attention_mask</span><span class="p">,</span> <span class="n">token_type_ids</span><span class="p">,</span> <span class="n">slot_label_ids</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p> </p>

<p>dataset을 생성할때 transform으로 get_input_features() 넣어주면, dataset에서 데이터를 불러올 때마다 수행이 되어 input feature로 만들어지게 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="n">preprocessor</span> <span class="o">=</span> <span class="n">Preprocessor</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">max_len</span><span class="p">)</span>
<span class="n">dataset</span> <span class="o">=</span> <span class="n">CorpusDataset</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span> <span class="n">preprocessor</span><span class="p">.</span><span class="n">get_input_features</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p> </p>

<p>이상으로 데이터셋 전처리가 완성되었습니다.</p>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="https://github.com/SKTBrain/KoBERT" target="_blank">KoBERT</a></li>
  <li><a href="https://github.com/SKTBrain/KoBERT" target="_blank">KoBERT</a></li>
</ul>

<p>https://github.com/monologg/KoBERT-NER</p>
:ET